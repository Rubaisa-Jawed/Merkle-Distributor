/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleDistributor,
  MerkleDistributorInterface,
} from "../MerkleDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000cf638038062000cf6833981810160405281019061003491906100ac565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001819055505050610152565b60008151905061009181610124565b92915050565b6000815190506100a68161013b565b92915050565b600080604083850312156100bf57600080fd5b60006100cd85828601610082565b92505060206100de85828601610097565b9150509250929050565b60006100f382610104565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61012d816100e8565b811461013857600080fd5b50565b610144816100fa565b811461014f57600080fd5b50565b610b9480620001626000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e7ba6ef146100515780632eb4a7ab1461006d5780639e34070f1461008b578063fc0c546a146100bb575b600080fd5b61006b600480360381019061006691906105bb565b6100d9565b005b610075610316565b60405161008291906108b6565b60405180910390f35b6100a560048036038101906100a09190610592565b61031c565b6040516100b2919061089b565b60405180910390f35b6100c3610372565b6040516100d09190610857565b60405180910390f35b6100e28561031c565b15610122576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610119906108d1565b60405180910390fd5b60008585856040516020016101399392919061081a565b60405160208183030381529060405280519060200120905061019f838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060015483610396565b6101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d590610911565b60405180910390fd5b6101e7866103ad565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b8152600401610242929190610872565b602060405180830381600087803b15801561025c57600080fd5b505af1158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190610569565b6102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca906108f1565b60405180910390fd5b7f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02686868660405161030693929190610931565b60405180910390a1505050505050565b60015481565b6000806101008361032d9190610979565b905060006101008461033f9190610a7d565b90506000600260008481526020019081526020016000205490506000826001901b90508081831614945050505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826103a38584610407565b1490509392505050565b6000610100826103bd9190610979565b90506000610100836103cf9190610a7d565b9050806001901b6002600084815260200190815260200160002054176002600084815260200190815260200160002081905550505050565b60008082905060005b84518110156104d5576000858281518110610454577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508083116104955782816040516020016104789291906107ee565b6040516020818303038152906040528051906020012092506104c1565b80836040516020016104a89291906107ee565b6040516020818303038152906040528051906020012092505b5080806104cd906109fc565b915050610410565b508091505092915050565b6000813590506104ef81610b19565b92915050565b60008083601f84011261050757600080fd5b8235905067ffffffffffffffff81111561052057600080fd5b60208301915083602082028301111561053857600080fd5b9250929050565b60008151905061054e81610b30565b92915050565b60008135905061056381610b47565b92915050565b60006020828403121561057b57600080fd5b60006105898482850161053f565b91505092915050565b6000602082840312156105a457600080fd5b60006105b284828501610554565b91505092915050565b6000806000806000608086880312156105d357600080fd5b60006105e188828901610554565b95505060206105f2888289016104e0565b945050604061060388828901610554565b935050606086013567ffffffffffffffff81111561062057600080fd5b61062c888289016104f5565b92509250509295509295909350565b610644816109aa565b82525050565b61065b610656826109aa565b610a45565b82525050565b61066a816109bc565b82525050565b610679816109c8565b82525050565b61069061068b826109c8565b610a57565b82525050565b60006106a3602883610968565b91507f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060008301527f636c61696d65642e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610709602383610968565b91507f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60008301527f65642e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061076f602183610968565b91507f4d65726b6c654469737472696275746f723a20496e76616c69642050726f6f6660008301527f2e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6107d1816109f2565b82525050565b6107e86107e3826109f2565b610a73565b82525050565b60006107fa828561067f565b60208201915061080a828461067f565b6020820191508190509392505050565b600061082682866107d7565b602082019150610836828561064a565b60148201915061084682846107d7565b602082019150819050949350505050565b600060208201905061086c600083018461063b565b92915050565b6000604082019050610887600083018561063b565b61089460208301846107c8565b9392505050565b60006020820190506108b06000830184610661565b92915050565b60006020820190506108cb6000830184610670565b92915050565b600060208201905081810360008301526108ea81610696565b9050919050565b6000602082019050818103600083015261090a816106fc565b9050919050565b6000602082019050818103600083015261092a81610762565b9050919050565b600060608201905061094660008301866107c8565b610953602083018561063b565b61096060408301846107c8565b949350505050565b600082825260208201905092915050565b6000610984826109f2565b915061098f836109f2565b92508261099f5761099e610add565b5b828204905092915050565b60006109b5826109d2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a07826109f2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a3a57610a39610aae565b5b600182019050919050565b6000610a5082610a61565b9050919050565b6000819050919050565b6000610a6c82610b0c565b9050919050565b6000819050919050565b6000610a88826109f2565b9150610a93836109f2565b925082610aa357610aa2610add565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160601b9050919050565b610b22816109aa565b8114610b2d57600080fd5b50565b610b39816109bc565b8114610b4457600080fd5b50565b610b50816109f2565b8114610b5b57600080fd5b5056fea264697066735822122020907783e2fcee3288e9553def075dbafbfac681df728db2a55b5100113a936364736f6c63430008000033";

type MerkleDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleDistributor__factory extends ContractFactory {
  constructor(...args: MerkleDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleDistributor> {
    return super.deploy(
      _token,
      _merkleRoot,
      overrides || {}
    ) as Promise<MerkleDistributor>;
  }
  getDeployTransaction(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _merkleRoot, overrides || {});
  }
  attach(address: string): MerkleDistributor {
    return super.attach(address) as MerkleDistributor;
  }
  connect(signer: Signer): MerkleDistributor__factory {
    return super.connect(signer) as MerkleDistributor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleDistributorInterface {
    return new utils.Interface(_abi) as MerkleDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleDistributor {
    return new Contract(address, _abi, signerOrProvider) as MerkleDistributor;
  }
}
